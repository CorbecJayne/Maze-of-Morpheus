package primary;

import gameElements.Element;
import gameElements.Floor;

import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSplitPane;

import auxilary.Level;
import auxilary.Vector2;

public class Client {
	// Urspreungliche Masseinheiten fuer Fenster- und Spielelemente
	private final int frameWidth = 1024;
	private final int frameHeight = 788;
	private final int blockSize = 32;
	private final int statsHeight = 52;
	private final int blockWidth = frameWidth / blockSize; // 32
	private final int blockHeight = (frameHeight - statsHeight) / blockSize; // 23
	// Spieltitel
	private final String gameTitle = "Maze of Morpheus";
	// Urspruengliche Fensterelemente
	private JFrame frame;
	private JSplitPane splitPane;
	private JPanel boardPanel;
	private JPanel statsPanel;
	
	// Spieler- und Gegner-Koordinaten
	private Vector2 player;
	private ArrayList<Vector2> enemies;
	
	// Graphische und Spielerische Matrix
	private JLabel[][] board;
	private Element[][] matrix;

	// Startet das eigentliche Gameplay
	public void run() {
		setupFrame();
		setupLevel();
		setupBoard();
		setupKeys();
	}

	private void setupFrame() {
		// JFrame Fenster erstellen, Titel setzen, Groesse setzen etc.
		frame = new JFrame(gameTitle);
		frame.setSize(frameWidth, frameHeight);
		frame.setResizable(false);
		frame.setDefaultCloseOperation(3);
		boardPanel = new JPanel(new GridLayout(blockHeight,blockWidth,0,0));
		statsPanel = new JPanel();
		splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,statsPanel, boardPanel);
		splitPane.setDividerLocation(statsHeight);
		frame.add(splitPane);
	}
	
	private void setupLevel() {
		Level lvl = new Level();
		this.matrix = lvl.getMatrix();
		this.player = lvl.getPlayer();
		this.enemies = lvl.getEnemies();
	}
	
	private void setupBoard() {
		board = new JLabel[32][23];
		for (int y = matrix[0].length - 1; y >= 0; --y) {
			for (int x = 0; x < matrix.length; ++x) {
				board[x][y] = new JLabel(matrix[x][y].getIcon());
			}
		}
		for (int y = board[0].length - 1; y >= 0; --y) {
			for (int x = 0; x < board.length; ++x) {
				boardPanel.add(board[x][y]);
			}
		}
		frame.setVisible(true);
	}
	
	private void setupKeys() {
		frame.addKeyListener(new KeyListener() {
			@Override
			public void keyTyped(final KeyEvent e) {}
			@Override
			public void keyReleased(final KeyEvent e) {}
			@Override
			public void keyPressed(final KeyEvent e) {
				switch (e.getKeyCode()) {
				case KeyEvent.VK_W:
				case KeyEvent.VK_UP:	upAction();
					break;
				case KeyEvent.VK_A:
				case KeyEvent.VK_LEFT:	leftAction();
					break;
				case KeyEvent.VK_S:
				case KeyEvent.VK_DOWN:	downAction();
					break;
				case KeyEvent.VK_D:
				case KeyEvent.VK_RIGHT:	rightAction();
					break;
				default: break;
				}
			}
		});
	}


	private void move(int xStart, int yStart, int xGoal, int yGoal) {
		matrix[xGoal][yGoal] = matrix[xStart][yStart];
		matrix[xStart][yStart] = new Floor(xStart, yStart);
		board[xGoal][yGoal].setIcon(matrix[xGoal][yGoal].getIcon());
		board[xStart][yStart].setIcon(matrix[xStart][yStart].getIcon());
	}
	private void move(Vector2 start, int xGoal, int yGoal) {
		move(start.getX(), start.getY(), xGoal, yGoal);
	}
	private void move(int xStart, int yStart, Vector2 goal) {
		move(xStart, yStart, goal.getX(), goal.getY());
	}
	private void move(Vector2 start, Vector2 goal) {
		move(start.getX(), start.getY(), goal.getX(), goal.getY());
	}

	private void changeIcon(int x, int y, int iconIndex) {
		board[x][y].setIcon(matrix[x][y].getIcon(iconIndex));
	}
	private void changeIcon(Vector2 coords, int iconIndex) {
		changeIcon(coords.getX(), coords.getY(), iconIndex);
	}
	private void changeIcon(int x, int y) {
		board[x][y].setIcon(matrix[x][y].getIcon());
	}
	private void changeIcon(Vector2 coords) {
		changeIcon(coords.getX(), coords.getY());
	}
	

	protected void rightAction() {
		
	}

	protected void downAction() {
		
	}

	protected void leftAction() {
		
	}

	protected void upAction() {
		
	}
	
	
	
}
